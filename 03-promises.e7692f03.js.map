{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAcC,SAASC,cAAc,SACrCC,EAAoBF,SAASC,cAAc,kBAC3CE,EAAmBH,SAASC,cAAc,iBAC1CG,EAAqBJ,SAASC,cAAc,mBAelDF,EAAYM,iBAAiB,UAAU,SAAAC,GACrCA,EAAMC,iBACN,IAAIC,EAAU,EACVC,EAAOC,OAAOP,EAAiBQ,OAASD,OAAOR,EAAkBS,OAErEC,YAAW,WACT,IAAMC,EAAUC,aAAY,WAnBhC,IAAuBC,EAAUC,EACzBC,GADeF,EAoBjBP,GAAW,EApBgBQ,EAqBJP,EApBrBQ,EAAgBC,KAAKC,SAAW,GAE7B,IAAIC,QADTH,EACiB,SAAAI,GACjBA,EAAQ,CAAEN,WAAUC,S,EAGH,SAACK,EAASC,GAC3BA,EAAO,CAAEP,WAAUC,S,IAchBO,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MACjBS,EAAA5B,GAAS6B,OAAOC,QACd,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAGjDa,OAAM,SAAAL,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MAClBS,EAAA5B,GAAS6B,OAAOI,QACd,sBAAqCF,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAIjDP,GAAQC,OAAOP,EAAiBQ,OAE5BH,IAAYE,OAAON,EAAmBO,QACxCoB,cAAclB,E,GAEfV,EAAiBQ,M,GACnBT,EAAkBS,MAAQR,EAAiBQ,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formElement = document.querySelector('.form');\nconst delayInputElement = document.querySelector('[name=\"delay\"]');\nconst stepInputElement = document.querySelector('[name=\"step\"]');\nconst amountInputElement = document.querySelector('[name=\"amount\"]');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    return new Promise(resolve => {\n      resolve({ position, delay });\n    });\n  } else {\n    return new Promise((resolve, reject) => {\n      reject({ position, delay });\n    });\n  }\n}\n\nformElement.addEventListener('submit', event => {\n  event.preventDefault();\n  let counter = 0;\n  let step = Number(stepInputElement.value) + Number(delayInputElement.value);\n\n  setTimeout(() => {\n    const timerID = setInterval(() => {\n      counter += 1;\n      createPromise(counter, step)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n\n      step += Number(stepInputElement.value);\n\n      if (counter === Number(amountInputElement.value)) {\n        clearInterval(timerID);\n      }\n    }, stepInputElement.value);\n  }, delayInputElement.value - stepInputElement.value);\n});\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$formElement","document","querySelector","$ce04d3a99e08e73b$var$delayInputElement","$ce04d3a99e08e73b$var$stepInputElement","$ce04d3a99e08e73b$var$amountInputElement","addEventListener","event","preventDefault","counter","step","Number","value","setTimeout","timerID","setInterval","position","delay","shouldResolve","Math","random","Promise","resolve","reject","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","clearInterval"],"version":3,"file":"03-promises.e7692f03.js.map"}